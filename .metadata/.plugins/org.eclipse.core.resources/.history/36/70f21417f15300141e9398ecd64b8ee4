#include <pthread.h>
#include <stdio.h>

#include "list.h"
#include "samples.h"
#include "stages.h"

#define MUESTRAS_EN_COLA 50

//Cola de estructuras con las muestras
Queue queue;

//Hilos y mutex para acceso a la cola
pthread_t samp_t, proc_t, plot_t;
pthread_mutex_t lock;

//Variable que infica que se esta en ejecucion
int s_corriendo = 1;

void * empezarGeneracionMuestras(void *arg){

	printf( "createSampleArray\n");

	//Se crean las estructuras en la cola para reutilizar
	int index;
	for ( index = 0; index < MUESTRAS_EN_COLA; index++) {

		printf( "Created and stored the array %i\n", index);

//		int timeSapling = 50; 	//milisec
//		int frecuency 	= 10; 	//Hz (si es 0 se usa randomSample())
//		struct Samples samples;
//		sample( &samples, timeSapling, frecuency );
//
//		//se incluye el arreglo en la cola
//		pthread_mutex_lock(&lock);
//		queue.push(&queue, &samples);
//		pthread_mutex_unlock(&lock);
	}

	//Ahora comienza a llenar las structs en estado
	while(s_corriendo)
	{

	}

	return NULL;
}

void * proccesArray(void *arg) {

//	while(1) {
//
//		pthread_mutex_lock(&lock);
//		Samples *item = queue.peek(&queue);
//		pthread_mutex_unlock(&lock);
//
//		if (!item->processed) {
//			int distance 	= 3;	//distancia del desplazamiento
//			process( item, distance );
//		}
//	}
//	return NULL;
}

void * plotArray(void *arg) {

//	while(1) {
//		//cast
//		pthread_mutex_lock(&lock);
//		Samples *item = queue.pop(&queue);
//		pthread_mutex_unlock(&lock);
//		if (item != NULL) {
//			if (item->processed) {
//				plot( item, 0 );
//			}
//		}
//	}
//	return NULL;
}

int main(void){

	//Se crea la pila
	queue = createQueue();

	if (pthread_mutex_init(&lock, NULL) != 0)
	{
		printf("\n mutex init failed\n");
		return 1;
	}

	//creacion de los hilos
	pthread_create(&samp_t, NULL, empezarGeneracionMuestras, NULL);
	pthread_create(&proc_t, NULL, proccesArray, NULL);
	pthread_create(&plot_t, NULL, plotArray, NULL);

	pthread_join(samp_t, NULL);
//	pthread_join(proc_t, NULL);
//	pthread_join(plot_t, NULL);
	pthread_mutex_destroy(&lock);

	//while (1){}

	return 0;
}


