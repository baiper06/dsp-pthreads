#include <pthread.h>
#include <stdio.h>
#include "stages.h"
#include "queue.h"

Queue queue;

pthread_t samp_t, proc_t, plot_t;
pthread_mutex_t lock;

void * createSampleArray(void *arg){

	while (1) {
		//se crean 10 arreglos de mestras
		for (int index = 0; index < 10; index++) {
			printf( "Created and stored the array %i\n", index);

			int timeSapling = 50; 	//milisec
			int frecuency 	= 10; 	//Hz (si es 0 se usa randomSample())
			struct Samples samples;
			sample( &samples, timeSapling, frecuency );

			//se incluye el arreglo en la cola
			pthread_mutex_lock(&lock);
			queue.push(&queue, &samples);
			pthread_mutex_unlock(&lock);
		}
	}
}

void * proccesArray(void *arg) {

	while(1) {
		pthread_mutex_lock(&lock);
		Samples *item = queue.peek(&queue);
		pthread_mutex_unlock(&lock);

		if (!item->processed) {
			int distance 	= 3;	//distancia del desplazamiento
			process( item, distance );
		}
	}
}

void * plotArray(void *arg) {

	while(1) {
		//cast
		pthread_mutex_lock(&lock);
		Samples *item = queue.pop(&queue);
		pthread_mutex_unlock(&lock);
		if (item != NULL) {
			if (item->processed) {
				plot( item, 0 );
			}
		}
	}
}

int main(void){

	//Se crea la pila
	queue = createQueue();

	if (pthread_mutex_init(&lock, NULL) != 0)
	{
		printf("\n mutex init failed\n");
		return 1;
	}

	//creacion de los hilos
	pthread_create(&samp_t, NULL, createSampleArray, NULL);
	pthread_create(&proc_t, NULL, proccesArray, NULL);
	pthread_create(&plot_t, NULL, plotArray, NULL);

	pthread_join(samp_t, NULL);
	pthread_join(proc_t, NULL);
	pthread_join(plot_t, NULL);
	pthread_mutex_destroy(&lock);

	//while (1){}

	return 0;
}


