/*
 * queue.cc
 *
 *  Created on: 14/10/2014
 *      Author: luis
 */

#include <cstddef>
#include <cstdlib>
#include "list.h"


void list_add(List* list, s_samples* item)
{
	// Create a new node
	Node* n = (Node*) malloc (sizeof(Node));
	n->item = item;
	n->next = NULL;

	if (list->head == NULL) { // no head
		list->head = n;
	} else{
		list->tail->next = n;
	}
	list->tail = n;
	list->size++;
}

s_samples* list_first_element_in_state (List* list, S_SAMPLE_ETAPA state)
{
	// get the first item
	Node* node = list->head;

	//Recorre lista para buscar el primer elemento en el estado
	int index;
	for(index = 0; index < list->size; index++)
	{
		if(node != NULL && node->item != NULL && (node->item->etapa == state))
		{
			break;
		}
	}





	Samples *item = head->item;
	// move head pointer to next node, decrease size
	queue->head = head->next;
	queue->size--;
	// free the memory of original head
	free(head);
	return item;
}

Queue createQueue () {
	Queue queue;
	queue.size = 0;
	queue.head = NULL;
	queue.tail = NULL;
	queue.push = &push;
	queue.pop = &pop;
	queue.peek = &peek;
	return queue;
}
